
Spring Framework

자바 객체 지향 4가지 특성
- 추상화 : 객체들이 가지는 공통적 기능을 묶어서 간소화한 것
- 캡슐화 : 필드, 메서드를 묶어서 객체로 표현 (필요한 것들만 가지는 것)
-  상속   : 부모의 기능을 물려받아서 확장(재사용성)
- 다형성 : 참조하는 타입에 따라서 성질이 달라진다.

객체지향 5대 원칙 - 객체지향을 효과적으로 구성하기 위해 지켜야할 규칙
- 단일 책임 원칙	 : 하나의 메서드엔 하나의 기능만 가진다.
- 개방 폐쇄 원칙	 : 확장에 대해 열려있고 수정에 대해서는 닫혀 있어야 한다.
- 리스코프 치환 원칙: 하위 타입은 상위 타입을 대체할 수 있어야 한다. (업 캐스팅)
- interface 분리 원칙 : 불필요한 간섭을 최소화 = 클라이언트의 목적과 용도에 적합한 인터페이스 만을 제공
- 의존관계 역전 원칙: 
저수준 모듈이 고수준 모듈에 의존해야 한다.
고수준 모듈 : 변경이 없는 추상화된 클래스 및 인터페이스
저수준 모듈 : 변하기 쉬운 자식 클래스


스프링 컨테이너 (IoC 컨테이너, DI 컨테이너) 

- IoC는 제어의 역전이다.(객체를 제어하는 역할을 스프링에게 넘긴다는 것을 의미한다.)
스프링에 의존해서 개발

- DI(의존성 주입) : 스프링이 다른 프레임워크와 차별화하여 제공하는 의존 관계를 주입하는 기능
객체를 직접생성하는 것이 아니라 외부에서 생성한 후 주입시켜주는 방식

- 리모컨이 있고 리모컨이 동작을 잘 하고 있는데 리모컨은 배터리가 없으면 동작을 안하게 된다.
- 리모컨은 배터리에 의존적이라고 볼 수 있다.
- 리모컨에 배터리를 넣으면 의존성을 주입하게 되는 형태이다.

객체 관리를 주로 수행하는 그릇

Maven 

- 라이브러리 의존성 관리 도구
- 자바에서 활용되는 여러 라이브러리 관리하는 도구
- 웹 상에 라이브러리가 있고 설정 파일을 통해서 프로젝트에 포함 가능
- pom.xml로 설정을 제어

